<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
 http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                          http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-2.5.xsd ">



    <camelContext id="camel" trace="false" xmlns="http://camel.apache.org/schema/spring"
                  xmlns:soap="http://www.w3.org/2001/06/soap-envelope"
                  xmlns:rou="urn:customs.ru:Envelope:RoutingInf:1.0"
                  xmlns:app="urn:customs.ru:Envelope:ApplicationInf:1.0"
            >
        <!-- Default JMX connector url: "service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/camel" -->
        <jmxAgent id="agent1" createConnector="true"/>
        <endpoint id="errors" uri="file://c:/temp/mq/?fileName=${date:now:yyyyMMdd-HHmmssSSS}-${property.uid}"/>
        <endpoint id="errors2" uri="file://c:/temp/mq/?fileName=${date:now:yyyyMMdd-HHmmssSSS}-${property.uid}"/>
        <endpoint id="errors_in" uri="file://c:/temp/mq/"/>

        <endpoint id="logerror" uri="log:+++ ERROR +++?showException=true&amp;showBody=false&amp;showExchangeId=true&amp;showStackTrace=true&amp;showHeaders=true&amp;showCaughtException=true"/>

                <route>
		<from uri="direct:sign"/>
	                <setProperty propertyName="exid">
	                    <ognl>exchangeId</ognl>
	                </setProperty>
	
		<to uri="log:+++ IN +++?showException=true&amp;showBody=false&amp;showExchangeId=true&amp;showStackTrace=true&amp;showHeaders=true&amp;showCaughtException=true"/> 
	
		<to uri="direct:saveCall"/> 
		<loadBalance>        
<!--			<roundRobin/> -->
			 <failover/>
			<to uri="direct:signImpl"/>
			<to uri="direct:signImpl2"/> 
		</loadBalance>
	                <setProperty propertyName="exid">
	                    <ognl>exchangeId+"-result"</ognl>
	                </setProperty>
		<to uri="direct:saveCall"/> 

	</route>
	<route>
		<from uri="direct:saveCall"/>
		<to  uri="file://c:/temp/camel/sign/?fileName=${date:now:yyyyMMdd-HHmmssSSS}-${property.exid}"/> 
	</route>

<!--
 <route>
    <from uri="timer://mqtimer?fixedRate=true&amp;period=3000"/>
  <to uri="bean:mqReader?method=processMessage"/>
 </route>
-->
<!--    
  <route>
            <from uri='wmq:RNTS.INCOME'/>
            <onException>
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <to ref="logerror"/>
                <log message="Сообщение перемещено в ERRORS endpoint"/>
                <to ref="errors2"/>
                <rollback markRollbackOnlyLast="true"/>
            </onException>
            <to uri='mq:RNTS.INCOME.INT'/> 
      </route>
-->
        <route>
            <from uri='mq:RNTS.INCOME'/>
            <transacted ref="PROPAGATION_REQUIRES_NEW"/>
<!--             <to uri="log:+++ request +++"/>   -->
            <onException>
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setProperty propertyName="uid">
                    <ognl>request.headers.jmsmessageid.replace(':','-')</ognl>
                </setProperty>
       
           <to ref="logerror"/>
                <log message="Сообщение перемещено в ERRORS endpoint"  loggingLevel="FATAL" logName="ru.acs.fts.router"/>
                <to ref="errors"/>
                <rollback markRollbackOnlyLast="true"/>
            </onException>

            <setProperty propertyName="InputQueue">
                <constant>RNTS.INCOME</constant>
            </setProperty>
            <log message="Route from ${property.InputQueue} by rules.xml"/>

       <choice>
            <when>
                  <ognl>request.body.length > 1000</ognl>
                  <log message="Для сообщения будет выставлен флаг сегментации"  loggingLevel="DEBUG" logName="ru.acs.fts.router"/>
	  <to uri="bean:xmlRulesRouterSegm?method=route"/>
            </when>
            <otherwise>
                <log message="Для сообщения НЕ будет выставлен флаг сегментации" loggingLevel="DEBUG" logName="ru.acs.fts.router"/>
	<to uri="bean:xmlRulesRouter?method=route"/>
            </otherwise>
        </choice>
   <!--         <to uri="bean:xmlRulesRouter?method=route"/> -->
        </route>


               <route>
            <from uri="mq:RNTS.APP.FROM"/>
            <transacted ref="PROPAGATION_REQUIRES_NEW"/>
<!--                    <to uri="log:+++ request +++"/>   -->
            <onException>
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setProperty propertyName="uid">
                    <ognl>request.headers.jmsmessageid.replace(':','-')</ognl>
                </setProperty>
                <to ref="logerror"/>
                <log message="Сообщение перемещено в ERRORS endpoint"  loggingLevel="FATAL"  logName="ru.acs.fts.router"/>
                <to ref="errors"/>
                <rollback markRollbackOnlyLast="true"/>
            </onException>

            <setProperty propertyName="InputQueue">
                <constant>RNTS.APP.FROM</constant>
            </setProperty>
            <log message="Route from ${property.InputQueue} by rules.xml" />

            
       <choice>
            <when>
                  <ognl>request.body.length > 10000</ognl>
                  <log message="Для сообщения будет выставлен флаг сегментации"  loggingLevel="DEBUG"  logName="ru.acs.fts.router"/>
	  <to uri="bean:xmlRulesRouterSegm?method=route"/>
            </when>
            <otherwise>
                <log message="Для сообщения НЕ будет выставлен флаг сегментации"  loggingLevel="DEBUG"  logName="ru.acs.fts.router"/>
	<to uri="bean:xmlRulesRouter?method=route"/>
            </otherwise>
        </choice>
   <!--         <to uri="bean:xmlRulesRouter?method=route"/> -->
        </route> 
     
        <route>
            <from ref="errors_in"/>
            <to uri="mq:ROUTER.ERRORS"/>
        </route>


    </camelContext>
    <!--
    <bean id="camelTracer" class="org.apache.camel.processor.interceptor.Tracer">
        <property name="traceExceptions" value="true"/>
        <property name="traceInterceptors" value="true"/>
        <property name="logLevel" value="ERROR"/>
        <property name="logName" value="ru.acs.fts.router"/>
    </bean>
    -->

    <bean id="xmlRulesRouterSegm" class="ru.acs.fst.router.XmlRulesRouter">
<!--        <property name="sender" ref="jmsSender"/> -->
        <property name="sender" ref="mqRemoteSender"/>
        <property name="checkRulesXslt" value="c:\Projects\JavaRouter\conf\CheckRules.xslt"/>  
    </bean>
    <bean id="xmlRulesRouter" class="ru.acs.fst.router.XmlRulesRouter">
        <property name="sender" ref="jmsSender"/>
        <property name="checkRulesXslt" value="c:\Projects\JavaRouter\conf\CheckRules.xslt"/>  
    </bean>



     <!-- НАстройки сервисов и т.п -->

    <bean id="mq" class="org.apache.camel.component.jms.JmsComponent"> 

       <property name="configuration" ref="jsmConfig"/>


    </bean>


    <bean id="mq2" class="ru.acs.fst.router.camel.component.MQComponent"> 
    </bean>

 

 <bean id="jsmConfig" class="org.apache.camel.component.jms.JmsConfiguration">

       <property name="disableReplyTo" value="true"/>

        <property name="connectionFactory" ref="myProxyConnectionFactory"/>

        <property name="cacheLevelName" value="CACHE_NONE"/>

        <!-- define the jms consumer/producer as transacted -->

        <property name="transacted" value="true"/>

        <!-- setup the transaction manager to use -->

        <!-- if not provided then Camel will automatic use a JmsTransactionManager, however if you

               for instance use a JTA transaction manager then you must configure it -->

        <property name="transactionManager" ref="jmsTransactionManager"/>

        <property name="concurrentConsumers" value="1"/>

        <property name="maxConcurrentConsumers" value="1"/>
<!--
        <property name="selector" value="JMS_IBM_Last_Msg_In_Group=TRUE"/>
-->
 </bean>

 

    <bean id="myProxyConnectionFactory"
          class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter">
        <property name="targetConnectionFactory" ref="myConnectionFactory"/>
        <property name="username" value="admin"/>
        <property name="password" value="admin000"/>
    </bean>

    <bean id="myConnectionFactory" class="com.ibm.mq.jms.MQXAQueueConnectionFactory">
        <property name="queueManager" value="RU.FTS.YUTU.RNTS.DPC"/>
        <property name="hostName" value="127.0.0.1"/>
        <property name="port" value="1430"/>
         <property name="channel" value="SYSTEM.DEF.SVRCONN"/> 
        <property name="transportType" value="1"/>

    </bean>

  <bean id="wmq" class="ru.acs.fst.router.camel.component.MQComponent">
        <property name="configuration" ref="mqConfig"/>
    </bean>


    <bean id="mqConfig" class="ru.acs.fst.router.camel.component.MQConfiguration">
        <property name="hostName" value="192.168.23.83"/>
        <property name="port" value="1430"/>
        <property name="queueManagerName" value="RU.FTS.YUTU.RNTS.DPC"/>
        <property name="channel" value="SYSTEM.DEF.SVRCONN"/>
    </bean>

<bean id="mqRemoteSender" class="ru.acs.fst.router.jms.MqRemoteSender">
        <property name="hostName" value="127.0.0.1"/>
        <property name="port" value="1430"/>
        <property name="queueManager" value="RU.FTS.YUTU.RNTS.DPC"/>
        <property name="channel" value="SYSTEM.DEF.SVRCONN"/>
        <property name="queueName" value="RNTS.INCOME.INT"/>
   </bean>


<!--
    <bean id="mqReader" class="ru.acs.fst.router.camel.component.MQMessageReader">
        <property name="hostName" value="127.0.0.1"/>
        <property name="port" value="1430"/>
        <property name="queueManagerName" value="RU.FTS.YUTU.RNTS.DPC"/>
        <property name="queueName" value="RNTS.INCOME"/>
        <property name="channel" value="SYSTEM.DEF.SVRCONN"/>
        <property name="sender" ref="mqRemoteSender2"/>
    </bean>

-->
    <bean id="sendDestination" class="com.ibm.mq.jms.MQQueue">
        <property name="baseQueueName">
            <value>ROUTER.ERRORS</value>
        </property>
        <property  name="targetClient">
            <value>1</value>
        </property>

<!--    
    <property name="baseQueueManagerName">
            <value>RU.FTS.GNIVC.RNTS.APP</value>
        </property>
-->
    </bean>


    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory">
            <ref bean="myProxyConnectionFactory"/>
            <!--
            <bean class="org.springframework.jms.connection.SingleConnectionFactory">
                <property name="targetConnectionFactory">
                    <ref local="myProxyConnectionFactory"/>
                </property>
            </bean>
            -->
        </property>
        <property name="defaultDestination">
            <ref bean="sendDestination"/>
        </property>
        <property name="receiveTimeout">
            <value>30000</value>
        </property>
        <property name="sessionTransacted" value="true"/>
        <property name="sessionAcknowledgeModeName" value="SESSION_TRANSACTED"/>

    </bean>


    <bean id="jmsSender" class="ru.acs.fst.router.jms.JMSSender">
        <property name="jmsTemplate">
            <ref bean="jmsTemplate"/>
        </property>
    </bean>


    <bean id="ftsSoapRouter" class="ru.acs.fst.router.SampleRouter">
        <property name="sender" ref="mqRemoteSender"/>
    </bean>

    <bean id="ftsSoapRouterLocal" class="ru.acs.fst.router.SampleRouter">
        <property name="sender" ref="jmsSender"/>
    </bean>

    <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="jmsTransactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
    </bean>

    <bean id="PROPAGATION_REQUIRES_NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="jmsTransactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
    </bean>

    <!-- setup spring jms TX manager -->

       <bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
           <property name="connectionFactory" ref="myProxyConnectionFactory"/>
       </bean>

<!--
<bean class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="serviceName" value="SignatureProcessor"/>
    <property name="service" ref="signatureProcessor"/>
    <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>    
    <property name="registryPort" value="1099"/>
</bean>

<bean id="signatureProcessor" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
    <property name="refreshStubOnConnectFailure" value="true"/>
    <property name="serviceUrl" value="rmi://vmdsig:1099/SignatureProcessor"/>
    <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
</bean>
-->
<!--
<bean id="signatureProcessor" class="ru.quorus.signature.server.SignatureProcessorImpl">
</bean>
-->
<bean id="signProcProxy" class="org.apache.camel.spring.remoting.CamelProxyFactoryBean">
  <property name="serviceUrl" value="direct:sign"/>
  <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
</bean>

<bean id="signProc" class="org.apache.camel.spring.remoting.CamelServiceExporter">
  <property name="uri" value="direct:signImpl"/>
  <property name="service">
	<bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
		    <property name="refreshStubOnConnectFailure" value="true"/>
		    <property name="serviceUrl" value="rmi://vmdsig:1099/SignatureProcessor"/>
		    <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
	</bean>
  </property>
  <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
</bean>

<bean id="signProc2" class="org.apache.camel.spring.remoting.CamelServiceExporter">
  <property name="uri" value="direct:signImpl2"/>
  <property name="service">
	<bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
		    <property name="refreshStubOnConnectFailure" value="true"/>
		    <property name="serviceUrl" value="rmi://vmdsig:1199/SignatureProcessor"/>
		    <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
	</bean>
  </property>
  <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>
</bean>


<bean class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="serviceName" value="SignatureProcessor"/>
    <property name="service" ref="signProcProxy"/>
    <property name="serviceInterface" value="ru.quorus.signature.server.SignatureProcessor"/>    
    <property name="registryPort" value="1099"/>
</bean>
</beans>
